version: '3.4'
services:
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - '/var/run/docker.sock:/tmp/docker.sock:ro'
      - './shared/nginx/vhost.d:/etc/nginx/vhost.d'
      - './shared/nginx/certs:/etc/nginx/certs:ro'
    networks:
      proxy: null
      identityserverui:
        aliases:
          - ${IDENTITY_SERVER_HOST}
          - ${IDENTITY_ADMIN_HOST}
          - ${ADMIN_API_HOST}
    restart: always
  identityserver4.admin:
    image: '${DOCKER_REGISTRY-}identityserver4-admin'
    build:
      context: .
      dockerfile: src/Skoruba.IdentityServer4.Admin/Dockerfile
    container_name: identityserver4-admin
    environment:
      - VIRTUAL_HOST=${IDENTITY_ADMIN_HOST}
      - 'DatabaseProviderConfiguration__ProviderType=${DB_PROVIDER}'
      - 'ConnectionStrings__ConfigurationDbConnection=${DB_CONNECTION_STRING}'
      - 'ConnectionStrings__PersistedGrantDbConnection=${DB_CONNECTION_STRING}'
      - 'ConnectionStrings__IdentityDbConnection=${DB_CONNECTION_STRING}'
      - 'ConnectionStrings__AdminLogDbConnection=${DB_CONNECTION_STRING}'
      - 'ConnectionStrings__AdminAuditLogDbConnection=${DB_CONNECTION_STRING}'
      - 'ConnectionStrings__DataProtectionDbConnection=${DB_CONNECTION_STRING}'
      - 'AdminConfiguration__IdentityAdminBaseUrl=https://${IDENTITY_ADMIN_HOST}'
      - 'AdminConfiguration__IdentityAdminRedirectUri=https://${IDENTITY_ADMIN_HOST}/signin-oidc'
      - 'AdminConfiguration__IdentityServerBaseUrl=https://${IDENTITY_SERVER_HOST}'
      - AdminConfiguration__RequireHttpsMetadata=false
      - 'IdentityServerData__Clients__0__ClientUri=https://${IDENTITY_ADMIN_HOST}'
      - 'IdentityServerData__Clients__0__RedirectUris__0=https://${IDENTITY_ADMIN_HOST}/signin-oidc'
      - 'IdentityServerData__Clients__0__FrontChannelLogoutUri=https://${IDENTITY_ADMIN_HOST}/signin-oidc'
      - 'IdentityServerData__Clients__0__PostLogoutRedirectUris__0=https://${IDENTITY_ADMIN_HOST}/signout-callback-oidc'
      - 'IdentityServerData__Clients__0__AllowedCorsOrigins__0=https://${IDENTITY_ADMIN_HOST}'
      - 'IdentityServerData__Clients__1__RedirectUris__0=https://${ADMIN_API_HOST}/swagger/oauth2-redirect.html'
      - 'Serilog__WriteTo__1__Args__connectionString=${DB_CONNECTION_STRING}'
      - DockerConfiguration__UpdateCaCertificate=true
      - ASPNETCORE_ENVIRONMENT=Development
    command: dotnet Skoruba.IdentityServer4.Admin.dll /seed
    depends_on:
      - db
      - identityserver4.sts.identity
    volumes:
      - './shared/serilog.json:/app/serilog.json'
      - './shared/identitydata.json:/app/identitydata.json'
      - './shared/identityserverdata.json:/app/identityserverdata.json'
      - './shared/nginx/certs/cacerts.crt:/usr/local/share/ca-certificates/cacerts.crt'
    networks:
      identityserverui: null
  identityserver4.admin.api:
    image: '${DOCKER_REGISTRY-}identityserver4-admin-api'
    build:
      context: .
      dockerfile: src/Skoruba.IdentityServer4.Admin.Api/Dockerfile
    container_name: identityserver4-admin-api
    environment:
      - VIRTUAL_HOST=${ADMIN_API_HOST}
      - 'DatabaseProviderConfiguration__ProviderType=${DB_PROVIDER}'
      - AdminApiConfiguration__RequireHttpsMetadata=false
      - 'AdminApiConfiguration__ApiBaseUrl=https://${ADMIN_API_HOST}'
      - 'AdminApiConfiguration__IdentityServerBaseUrl=https://${IDENTITY_SERVER_HOST}'
      - 'ConnectionStrings__ConfigurationDbConnection=${DB_CONNECTION_STRING}'
      - 'ConnectionStrings__PersistedGrantDbConnection=${DB_CONNECTION_STRING}'
      - 'ConnectionStrings__IdentityDbConnection=${DB_CONNECTION_STRING}'
      - 'ConnectionStrings__AdminLogDbConnection=${DB_CONNECTION_STRING}'
      - 'ConnectionStrings__AdminAuditLogDbConnection=${DB_CONNECTION_STRING}'
      - 'ConnectionStrings__DataProtectionDbConnection=${DB_CONNECTION_STRING}'
      - DockerConfiguration__UpdateCaCertificate=true
      - ASPNETCORE_ENVIRONMENT=Development
    volumes:
      - './shared/serilog.json:/app/serilog.json'
      - './shared/nginx/certs/cacerts.crt:/usr/local/share/ca-certificates/cacerts.crt'
    networks:
      identityserverui: null
  identityserver4.sts.identity:
    image: '${DOCKER_REGISTRY-}identityserver4-sts-identity'
    build:
      context: .
      dockerfile: src/Skoruba.IdentityServer4.STS.Identity/Dockerfile
    container_name: identityserver4-sts-identity
    environment:
      - VIRTUAL_HOST=${IDENTITY_SERVER_HOST}
      - 'DatabaseProviderConfiguration__ProviderType=${DB_PROVIDER}'
      - 'ConnectionStrings__ConfigurationDbConnection=${DB_CONNECTION_STRING}'
      - 'ConnectionStrings__PersistedGrantDbConnection=${DB_CONNECTION_STRING}'
      - 'ConnectionStrings__IdentityDbConnection=${DB_CONNECTION_STRING}'
      - 'ConnectionStrings__DataProtectionDbConnection=${DB_CONNECTION_STRING}'
      - 'AdminConfiguration__IdentityAdminBaseUrl=https://${IDENTITY_ADMIN_HOST}'
      - 'AdvancedConfiguration__IssuerUri=https://${IDENTITY_SERVER_HOST}'
      - DockerConfiguration__UpdateCaCertificate=true
      - ASPNETCORE_ENVIRONMENT=Development
    volumes:
      - './shared/serilog.json:/app/serilog.json'
      - './shared/nginx/certs/cacerts.crt:/usr/local/share/ca-certificates/cacerts.crt'
    depends_on:
      - db
    networks:
      identityserverui:
        aliases:
          - ${IDENTITY_SERVER_HOST}
  db:
    image: postgres
    ports:
      - '5436:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - TZ=Asia/Ho_Chi_Minh
    networks:
      identityserverui: null
volumes:
  pgdata:
    name: tris-id-admin-pgdata
networks:
  proxy:
    driver: bridge
  identityserverui:
    driver: bridge
